generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Staff {
  id        String   @id @default(ulid())
  name      String
  email     String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model College {
  id         String  @id @default(ulid())
  name       String
  email      String
  state      String
  country    String
  isVerified Boolean

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Order      Order[]
  Stationary Stationary[]
  users      User[]
}

model Stationary {
  id            String         @id @default(ulid())
  name          String
  email         String
  countryCode   String
  phone         String
  isActive      Boolean
  canDeliver    Boolean
  address       String
  collegeId     String
  ownerId       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Order         Order[]
  college       College        @relation(fields: [collegeId], references: [id])
  owner         User           @relation(fields: [ownerId], references: [id])
  PrintingRates PrintingRates?
  Commission    Commission[]
}

model User {
  id              String           @id @default(ulid())
  name            String
  email           String           @unique
  countryCode     String?
  phone           String?          @unique
  password        String
  isVerified      Boolean
  role            UserRole
  collegeId       String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  Cart            Cart[]
  Orders          Order[]
  Stationary      Stationary[]
  college         College          @relation(fields: [collegeId], references: [id])
  VerificationOtp VerificationOtp?
  Notification    Notification[]
}

model Cart {
  id        String     @id @default(ulid())
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
  Order     Order[]
}

model CartItem {
  id        String      @id @default(ulid())
  name      String
  fileUrl   String
  fileId    String
  coloured  Boolean
  duplex    Boolean
  spiral    Boolean
  hardbind  Boolean
  quantity  Int
  price     Int
  fileType  String
  cartId    String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Cart      Cart?       @relation(fields: [cartId], references: [id])
  OrderItem OrderItem[]
}

model Order {
  id              String      @id @default(ulid())
  userId          String
  collegeId       String
  stationaryId    String
  status          OrderStatus
  totalPrice      Int
  paymentId       String?
  otp             String
  orderType       OrderType
  deliveryAddress String?
  deliveryFee     Int?
  cartId          String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  Cart            Cart?       @relation(fields: [cartId], references: [id])
  college         College     @relation(fields: [collegeId], references: [id])
  stationary      Stationary  @relation(fields: [stationaryId], references: [id])
  user            User        @relation(fields: [userId], references: [id])
  OrderItem       OrderItem[]
  Payments        Payments[]
  Commission      Commission?
}

enum OrderStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  CANCELLED

  //TAKEAWAY
  COMPLETED

  //Delivery status
  OUT_FOR_DELIVERY

  // FINAL STATUS
  DELIVERED
}

model OrderItem {
  id         String    @id @default(ulid())
  name       String
  fileUrl    String
  coloured   Boolean
  duplex     Boolean
  spiral     Boolean
  hardbind   Boolean
  quantity   Int
  price      Int
  fileType   String
  orderId    String
  cartItemId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  CartItem   CartItem? @relation(fields: [cartItemId], references: [id])
  order      Order     @relation(fields: [orderId], references: [id])
}

model Payments {
  id            String        @id @default(ulid())
  orderId       String
  transactionId String?
  paymentId     String?
  description   String?
  status        PaymentStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Order         @relation(fields: [orderId], references: [id])
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum UserRole {
  SUPERADMIN
  ADMIN
  CUSTOMER
  STATIONARY_OWNER
}

enum OrderType {
  DELIVERY
  TAKEAWAY
}

model VerificationOtp {
  id        String   @id @default(ulid())
  userId    String   @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(ulid())
  userId    String
  title     String
  body      String
  type      String // e.g. ORDER, PAYMENT
  seen      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model PrintingRates {
  id           String @id @default(ulid())
  stationaryId String @unique
  colorRate    Int
  bwRate       Int
  spiralRate   Int
  hardbindRate Int
  duplexExtra  Int

  stationary Stationary @relation(fields: [stationaryId], references: [id])
}

model Commission {
  id           String @id @default(ulid())
  orderId      String @unique
  stationaryId String

  platformFee    Int // ₹5 flat from customer
  commissionRate Float // e.g. 5 (%)
  commissionFee  Int // 5% of totalPrice

  razorpayFee Int // In ₹
  gstOnRzpFee Int // GST on razorpay fee
  netEarnings Int // Final profit = (commissionFee + platformFee) - razorpayFee - gst

  status CommissionStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order      Order      @relation(fields: [orderId], references: [id])
  stationary Stationary @relation(fields: [stationaryId], references: [id])
}

enum CommissionStatus {
  PENDING
  COMPLETED
}
